openapi: 3.0.3
info:
  title: SNGF API
  version: 1.0.0
  description: API for managing plants, seeds, events, blogs, testimonials, and orders for the SNGF website

paths:
  /plants/:
      get:
        tags: [Plants]
        summary: Get list of plants and seeds
        description: Retrieve a filtered list of active plants and seeds.
        operationId: GetListPlant
        parameters:
          - in: query
            name: name
            schema:
              type: string
            description: Filter by name
          - in: query
            name: type
            schema:
              type: string
            description: Filter by type
          - in: query
            name: category
            schema:
              type: string
              enum: [SEED, PLANT]
            description: Filter by category (SEED or PLANT)
          - in: query
            name: size
            schema:
              type: string
              enum: [XS, S, M, L, XL]
            description: Filter by plant size (for PLANT category)
          - in: query
            name: unit
            schema:
              type: string
            description: Filter by unit (for SEED category)
          - in: query
            name: status
            schema:
              type: string
              enum: [ACTIVE, INACTIVE]
            description: Filter by plant status
          - in: query
            name: operator_id
            schema:
              type: integer
            description: Filter by operator ID
        responses:
          '200':
            description: Liste des plantes et graines récupérée avec succès.
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/Plant'

  /plants/{id}:
    get:
      tags: [Plants]
      summary: Get plant or seed by ID
      description: Retrieve a single plant or seed by its ID.
      operationId: GetPlantByID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Détails de la plante ou graine récupérés avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plant'
        '404':
          description: Plante ou graine non trouvée.

    put:
      tags: [Plants]
      summary: Update a plant or seed
      description: Update an existing plant or seed's information.
      operationId: CrupdatePlant
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Plant'
      responses:
        '200':
          description: Plante ou graine mise à jour avec succès.
        '400':
          description: Données invalides fournies.

  /events/:
    get:
      tags: [Events]
      summary: Get list of events
      description: Retrieve a filtered list of events.
      operationId: GetListEvent
      parameters:
        - in: query
          name: keyword
          schema:
            type: string
          description: Filter by keyword in title or description
        - in: query
          name: date
          schema:
            type: string
            format: date
          description: Filter by date
        - in: query
          name: status
          schema:
            type: string
            enum: [ACTIVE, INACTIVE]
          description: Filter by event status
        - in: query
          name: operator_id
          schema:
            type: integer
          description: Filter by operator ID
      responses:
        '200':
          description: Liste des événements récupérée avec succès.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'

  /events/{id}:
    get:
      tags: [Events]
      summary: Get event by ID
      description: Retrieve a single event by its ID.
      operationId: GetEventByID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Détails de l'événement récupérés avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Événement non trouvé.

    put:
      tags: [Events]
      summary: Update an event
      description: Update an existing event's information.
      operationId: CrupdateEvent
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Événement mis à jour avec succès.
        '400':
          description: Données invalides fournies.

  /blogs/:
    get:
      tags: [Blogs]
      summary: Get list of blogs
      description: Retrieve a filtered list of blog articles.
      operationId: GetListBlog
      parameters:
        - in: query
          name: keyword
          schema:
            type: string
          description: Filter by keyword in title or content
        - in: query
          name: status
          schema:
            type: string
            enum: [ACTIVE, INACTIVE]
          description: Filter by blog status
        - in: query
          name: operator_id
          schema:
            type: integer
          description: Filter by operator ID
      responses:
        '200':
          description: Liste des articles de blog récupérée avec succès.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Blog'

  /blogs/{id}:
    get:
      tags: [Blogs]
      summary: Get blog by ID
      description: Retrieve a single blog article by its ID.
      operationId: GetBlogByID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Détails de l'article récupérés avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Blog'
        '404':
          description: Article non trouvé.

    put:
      tags: [Blogs]
      summary: Update a blog
      description: Update an existing blog article.
      operationId: CrupdateBlog
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Blog'
      responses:
        '200':
          description: Article mis à jour avec succès.
        '400':
          description: Données invalides fournies.

  /orders/:
    get:
      tags: [Orders]
      summary: Get all orders
      description: Retrieve all submitted orders.
      operationId: GetListOrder
      responses:
        '200':
          description: Commandes récupérées avec succès.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

    put:
      tags: [Orders]
      summary: Submit an order (no payment)
      description: Submit an order. If items are available in stock, a notification email will be sent to the admin.
      operationId: CrupdateOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: Commande soumise avec succès. Un email a été envoyé à l'administrateur.
        '400':
          description: Stock insuffisant pour compléter la commande.

components:
  schemas:
    Plant:
      type: object
      required:
        - id
        - name
        - category
        - price
        - quantity
        - status
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "Basilic"
        category:
          type: string
          enum: [ SEED, PLANT ]
          example: "SEED"
        type:
          type: string
          example: "Herbe aromatique"
        description:
          type: string
          example: "Une plante aromatique populaire pour les plats méditerranéens."
        price:
          type: number
          format: float
          example: 3.5
        price_per_unit:
          type: number
          format: float
          example: 1.5
          description: "Prix par unité (g pour graines, unité pour plantes)"
        unit:
          type: string
          example: "g"
          description: "Unité de vente (g, sachet, etc.)"
        quantity:
          type: integer
          example: 100
          description: "Quantité disponible (en grammes pour graines ou unités pour plantes)"
        size:
          type: string
          enum: [ XS, S, M, L, XL ]
          description: "Taille de la plante (si catégorie = PLANT)"
        status:
          type: string
          enum: [ ACTIVE, INACTIVE ]
          example: ACTIVE
        image_url:
          type: string
          format: uri
          example: "https://example.com/images/basilic.jpg"

    Event:
      type: object
      required:
        - id
        - title
        - date
        - status
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          example: "Atelier jardinage printemps"
        description:
          type: string
          example: "Venez apprendre à planter vos propres légumes."
        date:
          type: string
          format: date
        location:
          type: string
          example: "Jardin communautaire, Lyon"
        image_url:
          type: string
          format: uri
        status:
          type: string
          enum: [ACTIVE, INACTIVE]

    Blog:
      type: object
      required:
        - id
        - title
        - content
        - status
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
          example: "Comment faire pousser des tomates sur balcon"
        content:
          type: string
        author:
          type: string
          example: "Jean Jardinier"
        published_at:
          type: string
          format: date-time
        status:
          type: string
          enum: [ACTIVE, INACTIVE]

    Order:
      type: object
      required:
        - id
        - items
      properties:
        id:
          type: string
          format: uuid
        items:
          type: array
          items:
            type: object
            required: [plant_id, quantity]
            properties:
              plant_id:
                type: integer
              quantity:
                type: integer
        customer_email:
          type: string
          format: email
          example: "client@example.com"
        submitted_at:
          type: string
          format: date-time
        status:
          type: string
          enum: [PENDING, CONFIRMED, CANCELLED]
    Contact:
      type: object
      required:
        - id
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          example: "John Doe"
        customer_email:
          type: string
          example: "example@gmail.com"
        message:
          type: string
          example: "message from John Doe"
